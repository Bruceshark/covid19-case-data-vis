package comp3111.covid;

import comp3111.covid.Core.CSVFileOperator;
import comp3111.covid.Core.DailyStatistics;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.control.Tab;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.util.StringConverter;

import javax.swing.text.DateFormatter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Building on the sample skeleton for 'ui.fxml' Controller Class generated by SceneBuilder 
 */
public class Controller implements Initializable {

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldISO;

    @FXML
    private Button buttonConfirmedDeaths;

    @FXML
    private TextField textfieldDataset;

    @FXML
    private Button buttonRateOfVaccination;

    @FXML
    private Button buttonConfirmedCases;

    @FXML
    private Tab tabReport1;

    @FXML
    private Tab tabReport2;

    @FXML
    private Tab tabReport3;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;

    @FXML
    private LineChart chartB;

    @FXML
    private NumberAxis chartBX;

    @FXML
    private NumberAxis chartBY;

    private static CSVFileOperator fileOperator;

    static {
        try {
            fileOperator = new CSVFileOperator("dataset/COVID_Dataset_v1.0.csv");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            String currentPath = null;
            try {
                currentPath = new java.io.File(".").getCanonicalPath();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            System.out.println("Current dir:" + currentPath);

            String currentDir = System.getProperty("user.dir");
            System.out.println("Current dir using System:" + currentDir);
        }
    }


    /**
     *  Task Zero
     *  To be triggered by the "Confirmed Cases" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doConfirmedCases(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getConfirmedCases(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Confirmed Deaths" button on the Task Zero Tab
     *  
     */
    @FXML
    void doConfirmedDeaths(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getConfirmedDeaths(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rate of Vaccination" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRateOfVaccination(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getRateOfVaccination(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }


    /**
     * Called to initialize a controller after its root element has been
     * completely processed.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  {@code null} if the location is not known.
     * @param resources The resources used to localize the root object, or {@code null} if
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {

        List<String> countryNames = new ArrayList<>();
        countryNames.add("United Kingdom");
        countryNames.add("United States");
        countryNames.add("Hong Kong");
        countryNames.add("Israel");
        countryNames.add("World");
        countryNames.add("India");
        countryNames.add("Japan");
        countryNames.add("Singapore");
        HashSet<List<DailyStatistics>> countryTrendSet = fileOperator.getCountryTrendSet(countryNames);
        for (List<DailyStatistics> countryTrend : countryTrendSet) {
            XYChart.Series<Number, Number> series1 = new XYChart.Series<>();
            series1.setName(countryTrend.get(0).getCountry());
            for (DailyStatistics dailyStatistics : countryTrend) {
                series1.getData().add(new XYChart.Data(dailyStatistics.getDate().getTime(), dailyStatistics.getDeathPerMillion()));
            }
            chartB.getData().add(series1);

        }
        // customize tickLabelFormatter for showing dates
        chartBX.setTickLabelFormatter(
                new StringConverter<Number>() {
                    @Override
                    public String toString(Number object) {
                        SimpleDateFormat a = new SimpleDateFormat("yy/MM/dd");
                        return a.format(new Date(object.longValue()));
                    }

                    @Override
                    public Number fromString(String string) {
                        return 0;
                    }
                }
        );
        chartBX.setAutoRanging(false); // manually set X-axis range and tick width
        SimpleDateFormat a = new SimpleDateFormat("yyyy/MM/dd");
        try {
            chartBX.setLowerBound(a.parse("2020/01/01").getTime());
            chartBX.setUpperBound(new Date().getTime());
            chartBX.setTickUnit(a.parse("1970/02/01").getTime());
        } catch (ParseException e) {
            e.printStackTrace();
        }
        chartB.setCreateSymbols(false); // do not show the symbols

    }
}

